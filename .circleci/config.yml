# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: coderbot/coderbot-ci:3.9-bullseye
      
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements_stub.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip install --upgrade pip
            pip install -r requirements_stub.txt

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements_stub.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            export PYTHONPATH=./coderbot:./stub:./test
            mkdir test-reports
            python3 -m unittest test/coderbot_test.py 2>&1 | tee test-reports/test_report.txt
            python3 -m unittest test/camera_test.py 2>&1 | tee test-reports/test_report.txt
            #python3 -m unittest test/cnn_test.py 2>&1 | tee test-reports/test_report.txt
            echo "test complete"
      - run:
          name: run openapi tests
          command: |
            . venv/bin/activate
            pip install schemathesis
            export PYTHONPATH=./coderbot:./stub:./test
            python3 coderbot/main.py &&
            st run --entry-point "^(?!.*(\/video\/stream)).*" https://localhost:5000/api/v1/openapi.json
            pkill python3
            echo "openapi test complete"
      - store_artifacts:
          path: test-reports/
          destination: tr1

      - store_test_results:
          path: test-reports/

  build-container:
    docker:
      - image: docker:20.10.19-git
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache py-pip
            pip install docker-compose
      - restore_cache:
          keys:
            - v1-{{ .Branch }}
          paths:
            - /caches/app.tar
      - run:
          name: Load Docker image layer cache
          command: |
            set +o pipefail
            docker load -i /caches/app.tar | true
      - run:
          name: Build application Docker image
          command: |
            docker build --cache-from=app -t "ghcr.io/coderbotorg/backend:${CIRCLE_SHA1}" . -f docker/Dockerfile
      - run:
          name: Save Docker image layer cache
          command: |
            mkdir -p /caches
            docker save -o /caches/app.tar app
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /caches/app.tar
      - deploy:
          name: Push application Docker image
          command: |
            #if [ "${CIRCLE_BRANCH}" == "master" ]; then
            docker login ghcr.io -u previ -p $GITHUB_CR_TOKEN
            docker tag "ghcr.io/coderbotorg/backend:${CIRCLE_SHA1}"
            docker push "ghcr.io/coderbotorg/backend:${CIRCLE_SHA1}"
            #fi